;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mills
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;
;; (Look for TODOs.)
;;
;; Below we already provide the following constants and axioms, which you are
;; free to use.
;;
;; Opponent relation: (opponent ?p1 ?p2)
;; i.e., (opponent blue red) and (opponent red blue)
;;
;; Intersection relation: (intersection ?x ?y) is true iff the given coordinates
;; correspond to an intersection in the board.
;;
;; Intersection adjacency: (adjacent ?x0 ?y0 ?x1 ?y1) is true iff both coordinates
;; correspond to intersections, and both intersections are connected.
;;
;; Horizontal and vertical lines:
;; (horizontal-line ?y ?x0 ?x1 ?x2) encodes that the intersections at (?x0, ?y)
;; and (?x1, ?y) and (?x2, ?y) together form a horizontal line. ?x0, ?x1 and ?x2
;; don't have to follow any particular order. For example, (horizontal-line 0 0 2 4),
;; (horizontal-line 0 2 0 4), (horizontal-line 0 4 2 0), ... will all be true.
;; (vertical-line ?x ?y0 ?y1 ?y2) encodes that the intersections at (?x, ?y0),
;; (?x, ?y1), and (?x, ?y2) together form a vertical line. The order of ?y0,
;; ?y1, and ?y2 can again be arbitrary.
;;
;; Number predecessor relation: (predecessor ?i ?j) is true iff ?i is smaller or
;; equal than 6, and ?j = ?i - 1.
;;
;; Equality relation: (equal ?i ?j) is true iff ?i is smaller or equal than 6,
;; and ?j = ?i.



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Roles

(role blue)
(role red)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initial state

; blue player starts
(init (turn blue))

; blue player has 6 stones left to place
(init (free-stones blue 6))

; red player has 6 stones left to place
(init (free-stones red 6))

; all 6 stones of the blue player are still in the game
(init (stones blue 6))

; all 6 stones of the red player are still in the game
(init (stones red 6))


; TODO (optional):
; Add additional facts as you wish

; is cell empty
(>= (is-empty ?x ?y)
    (not (true (cell ?x ?y red)))
    (not (true (cell ?x ?y blue)))
)

; FIXME - horizontal and vertical mills have different input arguments order?
; horizontal mill
(<= (is-mill ?y ?x0 ?x1 ?x2 ?player)
    (true (horizontal-line ?y ?x0 ?x1 ?x2))
    (true (cell ?x0 ?y ?player))
    (true (cell ?x1 ?y ?player))
    (true (cell ?x2 ?y ?player))
)

; vertical mill
(<= (is-mill ?x ?y0 ?y1 ?y2 ?player)
    (true (vertical-line ?x ?y0 ?y1 ?y2))
    (true (cell ?x ?y0 ?player))
    (true (cell ?x ?y1 ?player))
    (true (cell ?x ?y2 ?player))
)

; whether player places a piece
(<= has-placed ?player)
    (does ?player (place ?x ?y))
)

; did player move a piece into new location for a horizontal mill?
; move into x0
(<= (new-mill ?y ?x0 ?x1 ?x2 ?player)
    (does ?player (move ?locx ?locy ?x0 ?y))
    (true (is-mill ?y ?x0 ?x1 ?x2 ?player))
)
; move into x1
(<= (new-mill ?y ?x0 ?x1 ?x2 ?player)
    (does ?player (move ?locx ?locy ?x1 ?y))
    (true (is-mill ?y ?x0 ?x1 ?x2 ?player))
)
; move into x2
(<= (new-mill ?y ?x0 ?x1 ?x2 ?player)
    (does ?player (move ?locx ?locy ?x2 ?y))
    (true (is-mill ?y ?x0 ?x1 ?x2 ?player))
)

; did player move a piece into new location for a vertical mill?
; move into y0
(<= (new-mill ?x ?y0 ?y1 ?y2 ?player)
    (does ?player (move ?locx ?locy ?x ?y0))
    (true (is-mill ?x ?y0 ?y1 ?y2 ?player))
)
; move into y1
(<= (new-mill ?x ?y0 ?y1 ?y2 ?player)
    (does ?player (move ?locx ?locy ?x ?y1))
    (true (is-mill ?x ?y0 ?y1 ?y2 ?player))
)
; move into y2
(<= (new-mill ?x ?y0 ?y1 ?y2 ?player)
    (does ?player (move ?locx ?locy ?x ?y2))
    (true (is-mill ?x ?y0 ?y1 ?y2 ?player))
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Action preconditions


;; Placing free stones on the board
(<= (legal ?player (place ?x ?y))
    (intersection ?x ?y)
    (true (turn ?player))
    (not (true (cell ?x ?y blue)))
    (not (true (cell ?x ?y red)))
    (true (free-stones ?player ?n))
    (not (equal ?n 0)))


;; Taking an opponent's stone. (special-turn ?player) will be true, if the
;; player completed a mill after its last move.
;; TODO
(<= (legal ?player (take ?x ?y))
    (true (special-turn ?player))
    ;; TODO: complete the condition

    (true (cell ?x ?y ?opponent)) ; has to be opponent's piece
    ; TODO - stone can't be part of a mill

)

;; You may want to add additional rules (to encode e.g., disjunctive conditions):
(<= (legal ?player (take ?x ?y))
    (true (special-turn ?player))
    (opponent ?player ?opponent)
    ;; TODO: complete the condition

    (true (cell ?x ?y ?opponent)) ; has to be opponent's piece

    ; TODO - can only take opponent mill pieces if no other options
    (not (true (is-mill ?opponent)))
)

;; Moving stones to adjacent locations
(<= (legal ?player (move ?x0 ?y0 ?x1 ?y1))
    (true (turn ?player))
    (true (free-stones ?player 0)) ; moving only allowed once all stones have been placed
    ;; TODO: complete the condition
    (true (adjacent ?x0 ?y0 ?x1 ?y1)) ; cell must be adjacent
    (true (is-empty ?x1 ?y1)) ; move to cell must be empty
    ; DONE
)

;; Noop action
(<= (legal ?player noop)
    (role ?player)
    (not (true (turn ?player)))
    (not (true (special-turn ?player))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Next state computation


;; Turn is handed over to the opponent player if the player currently in turn
;; has not completed a mill.
;; TODO
(<= (next (turn ?opponent))
    (opponent ?player ?opponent)
    (true (turn ?player))
    ; TODO: complete the condition

    ; FIXME - no new mill
    (not (true (new-mill ?loc ?loc0 ?loc1 ?loc2)) )
)


;; Turn is handed over to the opponent player after the special-turn (i.e.,
;; after removing an opponent stone).
(<= (next (turn ?opponent))
    (opponent ?player ?opponent)
    (true (special-turn ?player)))


;; The player currently in turn is allowed to do a special-turn if he has
;; completed a mill.
;; TODO
(<= (next (special-turn ?player))
    (true (turn ?player))
    ;; TODO: complete the condition

    ; FIXME - has completed mill
    (new-mill )
)


;; Update the number of free stones:
;; TODO
(<= (next (free-stones ?player ?num))
    ;; TODO: complete the condition
    (true (has-placed))
    (true (free-stones ?player (predecessor ?num ?num)))
)

;; You may want to include additional rules to represent disjunctive conditions:
;;(<= (next (free-stones ?player ?num))
;;    ;; TODO: complete the condition
;;)


;; Update the number of players' stones still in game
;; TODO
(<= (next (stones ?player ?num))
    ;; TODO: complete the condition
)

;; You may want to include additional rules to represent disjunctive conditions:
;;(<= (next (stones ?player ?num))
;;    ;; TODO: complete the condition
;;)


;; Update cell contents:
;; TODO
(<= (next (cell ?x ?y ?player))
    ;; TODO: complete the condition
)

;; You may want to include additional rules to represent disjunctive conditions:
;; (<= (next (cell ?x ?y ?player))
;;     ;; TODO: complete the condition
;; )




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Terminal state and reward function

(<= terminal
    (true (stones ?player 2)))

(<= (goal ?player 0)
    (true (stones ?player 2)))

(<= (goal ?player 100)
    (opponent ?player ?opponent)
    (true (stones ?opponent 2)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auxilliary facts and axioms

(opponent blue red)
(opponent red blue)

(intersection 0 0)
(intersection 0 2)
(intersection 0 4)
(intersection 1 1)
(intersection 1 2)
(intersection 1 3)
(intersection 2 0)
(intersection 2 1)
(intersection 2 3)
(intersection 2 4)
(intersection 3 1)
(intersection 3 2)
(intersection 3 3)
(intersection 4 0)
(intersection 4 2)
(intersection 4 4)

(adjacent 0 0 2 0)
(adjacent 2 0 0 0)
(adjacent 2 0 4 0)
(adjacent 4 0 2 0)
(adjacent 0 4 2 4)
(adjacent 2 4 0 4)
(adjacent 2 4 4 4)
(adjacent 4 4 2 4)
(adjacent 0 0 0 2)
(adjacent 0 2 0 0)
(adjacent 0 2 0 4)
(adjacent 0 4 0 2)
(adjacent 4 0 4 2)
(adjacent 4 2 4 0)
(adjacent 4 2 4 4)
(adjacent 4 4 4 2)
(adjacent 1 1 2 1)
(adjacent 2 1 1 1)
(adjacent 2 1 3 1)
(adjacent 3 1 2 1)
(adjacent 1 3 2 3)
(adjacent 2 3 1 3)
(adjacent 2 3 3 3)
(adjacent 3 3 2 3)
(adjacent 1 1 1 2)
(adjacent 1 2 1 1)
(adjacent 1 2 1 3)
(adjacent 1 3 1 2)
(adjacent 3 1 3 2)
(adjacent 3 2 3 1)
(adjacent 3 2 3 3)
(adjacent 3 3 3 2)
(adjacent 2 0 2 1)
(adjacent 2 1 2 0)
(adjacent 0 2 1 2)
(adjacent 1 2 0 2)
(adjacent 2 4 2 3)
(adjacent 2 3 2 4)
(adjacent 4 2 3 2)
(adjacent 3 2 4 2)

(equal 0 0)
(equal 1 1)
(equal 2 2)
(equal 3 3)
(equal 4 4)
(equal 5 5)
(equal 6 6)

(predecessor 1 0)
(predecessor 2 1)
(predecessor 3 2)
(predecessor 4 3)
(predecessor 5 4)
(predecessor 6 5)

(<= (horizontal-line ?y ?x0 ?x1 ?x2)
    (adjacent ?x0 ?y ?x1 ?y)
    (adjacent ?x1 ?y ?x2 ?y)
    (not (equal ?x0 ?x2)))

(<= (horizontal-line ?y ?x0 ?x2 ?x1)
    (horizontal-line ?y ?x0 ?x1 ?x2))

(<= (horizontal-line ?y ?x1 ?x0 ?x2)
    (horizontal-line ?y ?x0 ?x1 ?x2))

(<= (horizontal-line ?y ?x1 ?x2 ?x0)
    (horizontal-line ?y ?x0 ?x1 ?x2))

(<= (horizontal-line ?y ?x2 ?x0 ?x1)
    (horizontal-line ?y ?x0 ?x1 ?x2))

(<= (horizontal-line ?y ?x2 ?x1 ?x0)
    (horizontal-line ?y ?x0 ?x1 ?x2))

(<= (vertical-line ?x ?y0 ?y1 ?y2)
    (adjacent ?x ?y0 ?x ?y1)
    (adjacent ?x ?y1 ?x ?y2)
    (not (equal ?y0 ?y2)))

(<= (vertical-line ?x ?y0 ?y2 ?y1)
    (vertical-line ?x ?y0 ?y1 ?y2))

(<= (vertical-line ?x ?y1 ?y0 ?y2)
    (vertical-line ?x ?y0 ?y1 ?y2))

(<= (vertical-line ?x ?y1 ?y2 ?y0)
    (vertical-line ?x ?y0 ?y1 ?y2))

(<= (vertical-line ?x ?y2 ?y0 ?y1)
    (vertical-line ?x ?y0 ?y1 ?y2))

(<= (vertical-line ?x ?y2 ?y1 ?y0)
    (vertical-line ?x ?y0 ?y1 ?y2))

